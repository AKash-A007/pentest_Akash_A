import base64

def reverse_encodings(encrypted_text):
    # Try reversing common encodings
    encodings = ['base64', 'hex', 'utf-8']

    decoded_text = encrypted_text

    for encoding in encodings:
        try:
            if encoding == 'base64':
                decoded_text = base64.b64decode(decoded_text).decode('utf-8')
            elif encoding == 'hex':
                decoded_text = bytes.fromhex(decoded_text).decode('utf-8')
            elif encoding == 'utf-8':
                decoded_text = decoded_text.encode('utf-8').decode('utf-8')

            print(f"Decoded using {encoding}: {decoded_text}")

            # Check if the decoded text contains a specific pattern (flag)
            if "your_flag_pattern" in decoded_text:
                print(f"Flag found: {decoded_text}")
                return decoded_text

        except Exception as e:
            print(f"Failed with {encoding}: {e}")

    return decoded_text

# Read encrypted text from a file
file_path = 'msg.txt'  # Replace with the actual file path
try:
    with open(file_path, 'r') as file:
        encrypted_text = file.read()
except FileNotFoundError:
    print(f"File not found: {file_path}")
    encrypted_text = ""

# Example usage
while True:
    decoded_text = reverse_encodings(encrypted_text)

    print("\nDecoded Text:")
    print(decoded_text)

    # If the decoded text contains a specific flag pattern, exit the loop
    if "your_flag_pattern" in decoded_text:
        break
    else:
        # Use the decoded text as the new encrypted text for the next iteration
        encrypted_text = decoded_text
