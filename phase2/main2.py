from pwn import *
import base64
import codecs
def decode_custom_encryption(encoded_string):
    mapping = {
        '@!@@!': 'A',
        '@!@@@': 'B',
        '@@!!!': 'C',
        '@@!!@': 'D',
        '!!!!!': 'E',
        '!!!!@': 'F',
        '!!!@!': 'G',
        '!!!@@': 'H',
        '!!@!!': 'I',
        '!!@!@': 'J',
        '!!@@!': 'K',
        '!!@@@': 'L',
        '!@!!!': 'M',
        '!@!!@': 'N',
        '!@!@!': 'O',
        '!@!@@': 'P',
        '!@@!!': 'Q',
        '!@@!@': 'R',
        '!@@@!': 'S',
        '!@@@@': 'T',
        '@!!!!': 'U',
        '@!!!@': 'V',
        '@!!@!': 'W',
        '@!!@@': 'X',
        '@!@!!': 'Y',
        '@!@!@': 'Z',
    }

    decoded_string = ''
    encoded_words = encoded_string.split()

    for word in encoded_words:
        decoded_string += mapping.get(word, word)  # If the word is not in the mapping, keep it unchanged

    return decoded_string
def get_mapping(char, mapping=None):
    try:
        return mapping[char]
    except KeyError:
        # Handle the KeyError (character not found in the mapping)
        return char
def decode_octal(octal_string):
    octal_values = [int(octal, 8) for octal in octal_string.split()]
    return ''.join([chr(octal) for octal in octal_values])

def decode_decimal(decimal_string):
    decimal_values = list(map(int, decimal_string.split()))
    return ''.join([chr(decimal) for decimal in decimal_values])

def decode_hex(hex_string):
    hex_values = [int(hex_value, 16) for hex_value in hex_string.split()]
    return ''.join([chr(hex_value) for hex_value in hex_values])

def decode_base64(base64_string):
    decoded_bytes = base64.b64decode(base64_string)
    return decoded_bytes.decode('utf-8')

def decode_rot13(rot13_string):
    return codecs.decode(rot13_string, 'rot_13')

def decode_caesar(caesar_string, key):
    result = ""
    for char in caesar_string:
        if char.isalpha():
            ascii_offset = ord('a') if char.islower() else ord('A')
            result += chr((ord(char) - ascii_offset - key) % 26 + ascii_offset)
        else:
            result += char
    return result

# ... (rest of the code remains the same)

# Replace 'your_binary' with the actual path to your executable
target_binary = './script'

# Start a new process for the binary
target = process(target_binary)

# Decode strings
while True:
    try:
        line = target.recvuntil('\n', timeout=10).decode('utf-8').strip()
        log.info("Received: %s", line)

        if "Better luck next time" in line:
            break  # Break if we see the termination message
        if line.startswith("Decrypt this:"):
            # Additional check for specific challenge
            challenge_text = line.split(":")[1].strip()
            log.info(f"Challenge: {challenge_text}")

            # Your decryption logic here
            decrypted_text = decode_custom_encryption(challenge_text)
            target.sendline(decrypted_text)

        if line.startswith("Decode the octal encoded string:"):
            octal_result = decode_octal(line.split(":")[1].strip())
            log.info(octal_result)
            target.sendline(octal_result)

        elif line.startswith("Decode the decimal encoded string:"):
            decimal_result = decode_decimal(line.split(":")[1].strip())
            log.info(decimal_result)
            target.sendline(decimal_result)
        elif line.startswith("Decode the hex encoded string:"):
            hex_result = decode_hex(line.split(":")[1].strip())
            log.info(hex_result)
            target.sendline(hex_result)
        elif line.startswith("Decode the base64 encoded string:"):
            base64_result = decode_base64(line.split(":")[1].strip())
            log.info(base64_result)
            target.sendline(base64_result)
        elif line.startswith("Decode the rot_13 encoded string:"):
            rot13_result = decode_rot13(line.split(":")[1].strip())
            log.info(rot13_result)
            target.sendline(rot13_result)
        elif line.startswith("Decode the caeser "):
            # Extract key and ciphertext
            key = int(line.split("with key")[1].strip())
            ciphertext = line.split("Decode the caeser ")[1].split("with key")[0].strip()

            # Decode Caesar cipher
            caesar_result = decode_caesar(ciphertext, key)
            log.info(caesar_result)
            target.sendline(caesar_result)

        if line.startswith("Try giving a sample string and see what you get."):

            # Allow the user to manually input the decrypted text

            decrypted_text = input("Enter : ")

            try:

                # Encode the input before sending

                target.sendline(decrypted_text)


            except Exception as send_error:

                log.error(f"Error sending input to the target process: {send_error}")

                break

            # Print the game's response

            try:

                response = target.recvuntil('\n', timeout=10).decode('utf-8').strip()

                log.info("Game's response: %s", response)

                # Allow the user to manually input the next message




            except EOFError:

                log.error("Error: Reached EOF. Process likely terminated.")

                break




    except Exception as e:
        log.error(f"An error occurred: {e}")

# Close the process
        target.close()