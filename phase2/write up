I am turning in my write up for the bios recruitment tasks 
I sincerely apologise for the late submission, I hope you take my work into consideration


#reversing challenge 1#

undefined8 main(int param_1,long param_2)

{
  undefined8 uVar1;
  size_t sVar2;
  long in_FS_OFFSET;
  int local_98;
  int local_94;
  int local_88 [24];
  byte abStack_28 [24];
  long local_10;
  
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  if (param_1 == 1) {
    puts("Usage: ./crackme FLAG");
    uVar1 = 1;
  }
  else {
    sVar2 = strlen(*(char **)(param_2 + 8));
    if (sVar2 == 0x15) {
      for (local_98 = 0; local_98 < 0x15; local_98 = local_98 + 1 ) {
        abStack_28[local_98] = "sup3r_s3cr3t_k3y_1337"[local_ 98] - 0x22;
      }
      local_88[0] = 0x37;
      local_88[1] = 0x3f;
      local_88[2] = 0x2f;
      local_88[3] = 0x76;
      local_88[4] = 0x2b;
      local_88[5] = 0x62;
      local_88[6] = 0x28;
      local_88[7] = 0x21;
      local_88[8] = 0x34;
      local_88[9] = 0xf;
      local_88[10] = 0x77;
      local_88[11] = 0x62;
      local_88[12] = 0x48;
      local_88[13] = 0x27;
      local_88[14] = 0x75;
      local_88[15] = 8;
      local_88[16] = 0x56;
      local_88[17] = 0x6a;
      local_88[18] = 0x68;
      local_88[19] = 0x4e;
      local_88[20] = 0x68;
      for (local_94 = 0; local_94 < 0x15; local_94 = local_94 + 1 ) {
        if ((int)(char)(abStack_28[local_94] ^ *(byte *)((long)loca l_94 + *(long *)(param_2 + 8)))
            != local_88[local_94]) {
          puts("Wrong flag");
          uVar1 = 1;
          goto LAB_00101355;
        }
      }
      printf("You found a flag! %s\n",*(undefined8 *)(param_2 + 8));
      uVar1 = 0;
    }
    else {
      puts("Wrong flag");
      uVar1 = 1;
    }
  }
LAB_00101355:
  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  }
  return uVar1;
}

EXPLANATION:
here the "sup3r_s3cr3t_k3y_1337" is decremented by 0x22 then it is xor ed in the line "if ((int)(char)(abStack_28[local_94] ^ *(byte *)((long)loca l_94 + *(long *)(param_2 + 8)))
            != local_88[local_94])" so do this I made a python program to undo the xor operation . I provided the python code as .py file 

# reversing challenge 2 #

# Visit https://www.lddgo.net/en/string/pyc-compile-decompile for more information
# Version : Python 2.7
this is the decompiled file that i got by decompiling the chall.pyc 

def modify_string(input_str):
    modified_str = ''
    for i in range(len(input_str)):
        char = input_str[i]
        if i % 2 == 0:
            modified_str += chr(ord(char) - 3)
            continue
        modified_str += chr(ord(char) + 2)
    
    return modified_str


def main():
    user_input = input('Enter a string: ')
    modified_input = modify_string(user_input)
    target_string = 'cn^ixelomkigaam{qjlp<Az'
    if modified_input == target_string:
        print 'Congratulations! You got the correct modified string.'
    else:
        print "Sorry, the modified string doesn't match the target."

if __name__ == '__main__':
    main()
Here the modify string function does the following changes to the inputted string 
If the index of the character is even (0-based indexing), it subtracts 3 from the ASCII value of that character.
If the index of the character is odd, it adds 2 to the ASCII value of that character.
It constructs the modified string based on these rules and returns it.
SO i made a python program to decode the modify string and return the flag:
def decode_string(input_str):
    decoded_str = ''
    for i in range(len(input_str)):
        char = input_str[i]
        if i % 2 == 0:
            decoded_str += chr(ord(char) + 3)
            continue
        decoded_str += chr(ord(char) - 2)

    return decoded_str


def main():
    encoded_flag = 'cn^ixelomkigaam{qjlp<Az'
    decoded_flag = decode_string(encoded_flag)
    print("Decoded flag:", decoded_flag)


if __name__ == '__main__':
    main()
so i got  the output as follows:
/usr/bin/python3.11 /home/dark-knight/Downloads/rev_challenge2.py 
Decoded flag: flag{compiled_python??}

Process finished with exit code 0

# Reversing challenges 3#
i used binary ninja to view it in hLIL 
and then found the hexdecimal value 0xcafef00d then i converted it to deciaml (Decimal representation: 3405705229)and used chmod to give permission to excecute the file 
dark-knight@dark-knight-Zenbook-UX8402ZE-UX8402ZE:~/Downloads$ ./conditional 3405705229
Access granted.
flag{at_least_this_cafe_wont_leak_your_credit_card_numbers}
# reversing challenge 4 #
i have given the python code for reversing challenge 4 


MISC challenge 1

I didn't do this challenge
LIke i did partially i got till the github file for the file containing some data structure but didn't complete till the end 

MISC challenge 2 

I uploaded the python file for that 

MIsc challenge 3
♐︎●︎♋︎♑︎❀︎🖮︎📄︎📂︎📄︎🗏︎♎︎♍︎♏︎♋︎📂︎🖲︎🖲︎🗏︎⌛︎🗄︎🗏︎🗏︎♏︎🗐︎🗄︎📄︎🗄︎♋︎📄︎♏︎📂︎🗄︎♌︎♋︎♎︎🗄︎♍︎❝︎
decoded by an online site : f︎l︎a︎g︎{︎7︎2︎1︎2︎3︎d︎c︎e︎a︎1︎9︎9︎3︎6︎5︎3︎3︎e︎4︎5︎2︎5︎a︎2︎e︎1︎5︎b︎a︎d︎5︎c︎}︎
https://lingojam.com/WingDing

MISC challenge 4

i uploaded the python code for that
i used loop and some important decoding cypher using multiple decoding like rot 13 etc etc
the code does not work properly  like i didnt give condition to terminate the program when the decodecd flag is found but it gives progarm to find the flag 

MIsc challenge 5
i did not understant it 

